{
  "compilerOptions": {
    // 转成的目标代码，esnext指es6及以后的代码，因为此处选用babel把ts转成js所以此处不用改，如果用tsc则要改成es5
    "target": "esnext",
    // 目标代码需要使用的模块化方案(commonjs,require/modele.export,es module import export)
    "module": "esnext",
    // 严格检查(any)
    "strict": true,
    // 要不要对jsx进行处理
    "jsx": "preserve",
    // 辅助的导入功能
    "importHelpers": true,
    // 按照node方式去解析模块
    "moduleResolution": "node",
    // 跳过对一些库的类型检测(axios,lodash),有什么类型自己导
    "skipLibCheck": true,
    // export default和module.export能否混合使用
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    // 要不要生成映射文件，把ts转成js
    "sourceMap": true,
    // 文件路径被解析时，基于url
    "baseUrl": ".",
    // 指定具体要解析使用的类型，一般可以不传，从target看
    "types": [
      "webpack-env"
    ],
    // 编译阶段的路径解析(类似于webpack的alisa)
    "paths": {
      "@/*": [
        "src/*"
      ],
      "components/*": [
        "src/components/*"
      ]
    },
    //指定项目中可以使用哪些库里的类型(Proxy/Window/Document)
    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  },
  // 哪些文件会用tsconfig来做解析
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "tests/**/*.ts",
    "tests/**/*.tsx"
  ],
  // 哪些文件不会用tsconfig来做解析
  "exclude": [
    "node_modules"
  ]
}
